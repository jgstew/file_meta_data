---
name: Tag and Release

on:
  push:
    branches:
      - main
    paths:
      - "_version.py"
      - ".github/workflows/tag_and_release.yaml"

jobs:
  release_new_tag:
    # if: github.repository == 'jgstew/file_meta_data'
    name: Tag and Release
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v3"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3
      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(python ./setup.py --version)"
      # only make release if there is NOT a git tag for this version
      - name: "Check: package version has corresponding git tag"
        # this will prevent this from doing anything when run through ACT
        if: ${{ !env.ACT }}
        id: tagged
        shell: bash
        run: git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.getversion.outputs.version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"
      # wait for all other tests to succeed
      #   what if no other tests?
      - name: Wait for tests to succeed
        if: steps.tagged.outputs.tagged == 1
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: main
          running-workflow-name: "Tag and Release"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
      # - name: Install requirements
      #   if: steps.tagged.outputs.tagged == 1
      #   run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: Install build tools
      #   if: steps.tagged.outputs.tagged == 1
      #   run: pip install setuptools wheel build
      # - name: Run build
      #   if: steps.tagged.outputs.tagged == 1
      #   run: python3 -m build
      # - name: Get Wheel File
      #   if: steps.tagged.outputs.tagged == 1
      #   id: getwheelfile
      #   shell: bash
      #   run: echo "::set-output name=wheelfile::$(find "dist" -type f -name "*.whl")"
      - name: Automatically create github release
        if: steps.tagged.outputs.tagged == 1
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: v${{ steps.getversion.outputs.version }}
          prerelease: false
  pub_wheel:
    needs: release_new_tag
    name: Publish Wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3
      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(python ./setup.py --version)"
      - name: Get commit messages
        id: release_notes
        shell: bash
        run: |
          echo **Full Changelog**: https://github.com/jgstew/file_meta_data/compare/$(git tag -l --sort=-version:refname | head -n 2 | tail -n 1)...$(git tag -l --sort=-version:refname | head -n 1) > _release_notes.md
          echo "### Commits" >> _release_notes.md
          git log --pretty="- %h - %s - (%an)" $(git tag -l --sort=-version:refname | head -n 2 | tail -n 1)...$(git tag -l --sort=-version:refname | head -n 1) >> _release_notes.md
          cat _release_notes.md
      - name: Set release body text
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: v${{ steps.getversion.outputs.version }}
          bodyFile: "_release_notes.md"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install build tools
        run: pip install setuptools wheel build
      - name: Install requirements
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: build
        run: python -m build
      - name: Get Wheel File Path
        id: getwheelfile
        shell: bash
        run: echo "::set-output name=wheelfile::$(find "dist" -type f -name "*.whl" | cut -d "/" -f2-)"
      - name: Test pip install of wheel
        shell: bash
        run: pip install $(find "dist" -type f -name "*.whl")
      - name: Test python import
        shell: bash
        run: python -c "import file_metadata"
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/${{ steps.getwheelfile.outputs.wheelfile }}
          asset_name: ${{ steps.getwheelfile.outputs.wheelfile }}
          tag: v${{ steps.getversion.outputs.version }}
  publish:
    needs: pub_wheel
    name: Release Binary for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # https://github.community/t/how-to-get-just-the-tag-name/16241/21?u=jgstew
          - os: ubuntu-latest
            artifact_name: file_metadata
            asset_name: file_metadata-${{ github.event.release.tag_name }}-linux-amd64.zip
          - os: windows-latest
            artifact_name: file_metadata.exe
            asset_name: file_metadata-${{ github.event.release.tag_name }}-windows-amd64.zip
          - os: macos-latest
            artifact_name: file_metadata
            asset_name: file_metadata-${{ github.event.release.tag_name }}-macos-amd64.zip
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3
      - name: Read VERSION file
        id: getversion
        run: echo "::set-output name=version::$(python ./setup.py --version)"
      - name: Install build tools
        run: pip install setuptools wheel build pyinstaller
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: get version from setup
        run: python setup.py --version
      - name: pyinstaller build binary
        run: python ./versionfile.py; pyinstaller ./file_metadata.py --clean --onefile --version-file=versionfile.txt
      # https://github.com/marketplace/actions/easy-zip-files
      - uses: papeloto/action-zip@v1
        with:
          files: ./dist/${{ matrix.artifact_name }}
          dest: ./dist/file_metadata.zip
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/file_metadata.zip
          asset_name: ${{ matrix.asset_name }}
          tag: v${{ steps.getversion.outputs.version }}
